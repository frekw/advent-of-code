// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Input$MyNewProject = require("./Input.bs.js");

function digits(n) {
  var _acc = /* [] */0;
  var _n = n;
  while(true) {
    var n$1 = _n;
    var acc = _acc;
    if (n$1 <= 0) {
      return acc;
    } else {
      var x = n$1 % 10;
      _n = n$1 / 10 | 0;
      _acc = /* :: */[
        x,
        acc
      ];
      continue ;
    }
  };
}

function count(xs, y) {
  return Belt_List.length(Belt_List.keep(xs, (function (x) {
                    return Caml_obj.caml_equal(x, y);
                  })));
}

function hasAdjecent(xs) {
  return Belt_List.some(xs, (function (x) {
                return count(xs, x) === 2;
              }));
}

function isIncreasing(xs) {
  var _last = Pervasives.min_int;
  var _xs = xs;
  while(true) {
    var xs$1 = _xs;
    var last = _last;
    if (xs$1) {
      var rest = xs$1[1];
      var m = xs$1[0];
      if (Caml_obj.caml_equal(last, m)) {
        _xs = rest;
        continue ;
      } else if (Caml_obj.caml_greaterthan(m, last)) {
        _xs = rest;
        _last = m;
        continue ;
      } else {
        return false;
      }
    } else {
      return true;
    }
  };
}

function range(from, to_) {
  var _acc = /* [] */0;
  var from$1 = from;
  var _to_ = to_ + 1 | 0;
  while(true) {
    var to_$1 = _to_;
    var acc = _acc;
    var n = to_$1 - 1 | 0;
    if (n === from$1) {
      return /* :: */[
              n,
              acc
            ];
    } else {
      _to_ = n;
      _acc = /* :: */[
        n,
        acc
      ];
      continue ;
    }
  };
}

function run(param) {
  return Belt_List.length(Belt_List.keep(Belt_List.keep(Belt_List.keep(Belt_List.map(range(param[0], param[1]), digits), (function (xs) {
                            return Belt_List.length(xs) === 6;
                          })), hasAdjecent), isIncreasing));
}

console.log(run(Input$MyNewProject.input));

exports.digits = digits;
exports.count = count;
exports.hasAdjecent = hasAdjecent;
exports.isIncreasing = isIncreasing;
exports.range = range;
exports.run = run;
/*  Not a pure module */
