// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var RList$Rationale = require("rationale/src/RList.js");
var Option$Rationale = require("rationale/src/Option.js");
var Input$MyNewProject = require("./Input.bs.js");

function write(env, reg, v) {
  return RList$Rationale.update(v, reg, env);
}

function add(a, b) {
  return a + b | 0;
}

var multi = Caml_int32.imul;

function lookup(env, n) {
  return RList$Rationale.nth(n, env);
}

function toOps(param) {
  return RList$Rationale.splitEvery(4, param);
}

function parseLine(l) {
  if (l) {
    var switcher = l[0] - 1 | 0;
    if (switcher === 0 || switcher === 1) {
      if (switcher !== 0) {
        var match = l[1];
        if (match) {
          var match$1 = match[1];
          if (match$1) {
            var match$2 = match$1[1];
            if (match$2 && !match$2[1]) {
              return /* Mult */Block.__(1, [
                        match[0],
                        match$1[0],
                        match$2[0]
                      ]);
            }
            
          }
          
        }
        
      } else {
        var match$3 = l[1];
        if (match$3) {
          var match$4 = match$3[1];
          if (match$4) {
            var match$5 = match$4[1];
            if (match$5 && !match$5[1]) {
              return /* Add */Block.__(0, [
                        match$3[0],
                        match$4[0],
                        match$5[0]
                      ]);
            }
            
          }
          
        }
        
      }
    } else if (switcher === 98) {
      var match$6 = l[1];
      if (match$6) {
        var match$7 = match$6[1];
        if (match$7) {
          var match$8 = match$7[1];
          if (!(match$8 && match$8[1])) {
            return /* Return */1;
          }
          
        } else {
          return /* Return */1;
        }
      } else {
        return /* Return */1;
      }
    }
    
  }
  console.log("Parse error:", l);
  return /* Error */0;
}

function apply(f, a, b, dst, env) {
  var __x = Curry._2(Option$Rationale.Infix.$less$$great, Curry._2(Option$Rationale.Infix.$less$$great, Curry._2(Option$Rationale.Infix.$less$star$great, Curry._2(Option$Rationale.Infix.$less$star$great, Curry._1(Option$Rationale.pure, f), RList$Rationale.nth(a, env)), RList$Rationale.nth(b, env)), (function (__x) {
              return RList$Rationale.update(__x, dst, env);
            })), (function (x) {
          return /* Continue */Block.__(0, [x]);
        }));
  return Option$Rationale.$$default(/* Error */0, __x);
}

function $$eval(op, env) {
  if (typeof op === "number") {
    if (op === /* Error */0) {
      return /* Error */0;
    } else {
      return /* Result */Block.__(1, [env]);
    }
  } else if (op.tag) {
    return apply(multi, op[0], op[1], op[2], env);
  } else {
    return apply(add, op[0], op[1], op[2], env);
  }
}

function run(input) {
  var _env = input;
  var _pc = 0;
  while(true) {
    var pc = _pc;
    var env = _env;
    var __x = Curry._2(Option$Rationale.Infix.$less$$great, Curry._2(Option$Rationale.Infix.$less$$great, RList$Rationale.nth(pc, RList$Rationale.splitEvery(4, env)), parseLine), (function(env){
        return function (x) {
          return $$eval(x, env);
        }
        }(env)));
    var result = Option$Rationale.$$default(/* Error */0, __x);
    if (typeof result === "number") {
      return ;
    } else if (result.tag) {
      return result[0];
    } else {
      _pc = pc + 1 | 0;
      _env = result[0];
      continue ;
    }
  };
}

function range(__x) {
  return RList$Rationale.rangeInt(1)(1, __x);
}

var __x = List.flatten(List.map((function (i) {
            return List.map((function (j) {
                          return /* tuple */[
                                  i,
                                  j
                                ];
                        }), RList$Rationale.rangeInt(1)(1, 99));
          }), RList$Rationale.rangeInt(1)(1, 99)));

var res = List.find((function (param) {
        var env = RList$Rationale.update(param[0], 1, Input$MyNewProject.input);
        var res = Curry._2(Option$Rationale.Infix.$great$great$eq, run(RList$Rationale.update(param[1], 2, env)), (function (param) {
                return RList$Rationale.nth(0, param);
              }));
        if (res !== undefined) {
          return res === 19690720;
        } else {
          return false;
        }
      }), __x);

console.log(res);

var nth = RList$Rationale.nth;

exports.write = write;
exports.add = add;
exports.multi = multi;
exports.lookup = lookup;
exports.toOps = toOps;
exports.nth = nth;
exports.parseLine = parseLine;
exports.apply = apply;
exports.$$eval = $$eval;
exports.run = run;
exports.range = range;
exports.res = res;
/* __x Not a pure module */
